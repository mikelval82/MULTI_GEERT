{
    "EEG_generator.py": "# -*- coding: utf-8 -*-\n\"\"\"\n@author: %(Mikel Val Calvo, Juan Antonio Barios Heredero, Arturo Bertomeu-Motos)\n@email: %(mikel1982mail@gmail.com, juan.barios@gmail.com, arturobm90@gmail.com)\n@institution: %(Dpto. de Inteligencia Artificial, Universidad Nacional de Educación a Distancia (UNED); Center for Biomedical Technology, Universidad Politécnica, Madrid, Spain; Neuroengineering medical group (UMH) ) \n@DOI: \n\"\"\"\n\nfrom pylsl import StreamInfo, StreamOutlet\nimport numpy as np\nimport time\nimport sys\n\n\ndef generate_wave(A, B, f, t, wave_type, phi=0, num_channels=8, noise_level=0.0):\n    \"\"\"Genera una onda cuadrada o sinusoidal con una fase opcional.\"\"\"\n    if wave_type == 'square':\n        # Generar onda cuadrada con fase\n        sample = [A * np.sign(np.sin(2 * np.pi * f * t + phi)) + B + noise_level * np.random.randn() for _ in range(num_channels)]\n    elif wave_type == 'sinusoidal':\n        # Generar onda sinusoidal con fase\n        sample = [A * np.sin(2 * np.pi * f * t + phi) + B + noise_level * np.random.randn() for _ in range(num_channels)]\n    else:\n        raise ValueError(\"Tipo de onda no reconocido. Usa 'square' o 'sinusoidal'.\")\n    return sample\n\n\ndef main(*args):\n    if len(args[0]) < 3:\n        print(\"Por favor, proporciona el tipo de onda ('square' o 'sinusoidal'), el nombre de la señal y la fase (en radianes).\")\n        return\n\n    wave_type = args[0][0]  # Tipo de onda (square o sinusoidal)\n    stream_name = args[0][1]  # Nombre de la señal (para diferenciar los streams)\n    phi = float(args[0][2])  # Fase de la onda (en radianes)\n\n    # Create stream info for the LSL outlet\n    info = StreamInfo(stream_name, 'EEG', 8, 250, 'float32', 'uid_' + stream_name)\n\n    # Add metadata for the stream\n    chns = info.desc().append_child(\"channels\")\n    for label in [\"C3\", \"C4\", \"Cz\", \"FPz\", \"POz\", \"CPz\", \"O1\", \"O2\"]:\n        ch = chns.append_child(\"channel\")\n        ch.append_child_value(\"label\", label)\n        ch.append_child_value(\"unit\", \"microvolts\")\n        ch.append_child_value(\"type\", \"EEG\")\n    info.desc().append_child_value(\"manufacturer\", \"SCCN\")\n    cap = info.desc().append_child(\"cap\")\n    cap.append_child_value(\"name\", \"EasyCap\")\n    cap.append_child_value(\"size\", \"54\")\n    cap.append_child_value(\"labelscheme\", \"10-20\")\n\n    # Create an outlet for the monitor (stream)\n    outlet = StreamOutlet(info)\n\n    # Parameters for wave generation\n    A = 50  # Amplitude\n    B = 0  # Offset\n    f = 10  # Frequency (Hz) - To maintain coherence, both streams need to have the same frequency\n    t = 0  # Initial time\n    dt = 1 / 250  # Time step (sampling rate of 250 Hz)\n    noise_level = 20.0  # Noise level to add some variability to the signal\n\n    while True:\n        # Generate the wave (square or sinusoidal) with the provided phase\n        sample = generate_wave(A, B, f, t, wave_type, phi=phi, noise_level=noise_level)\n        outlet.push_sample(sample)\n        t += dt  # Increment time\n        time.sleep(dt)  # Sleep for the sampling period (1/250 seconds)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"
}